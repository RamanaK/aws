#!/usr/local/sqlminus/bin/python
"""
awsh -- aws shell

    https://github.com/awsh             :  share and enjoy!
    Mark Harrison, marhar@gmail.com     :
"""

import os,sys,readline,cmd,atexit,ConfigParser,traceback,subprocess
import fnmatch,pprint,urllib2,stat,glob,types,collections,threading
import boto.ec2,boto.sqs,boto,boto.iam,boto.glacier,boto.sns,boto.ses
import boto.ec2.elb,boto.s3,boto.kinesis

import awshelpers
from awshelpers import P,P0,D,D0,T,PP

#-----------------------------------------------------------------------
def setEc2Conn(obj):
    """connect to ec2"""
    obj.conn = boto.ec2.connect_to_region(obj.region,
                              aws_access_key_id = obj.accesskey,
                              aws_secret_access_key = obj.secretkey)

#-----------------------------------------------------------------------
def setSqsConn(obj):
    """connect to sqs"""
    obj.sqsconn = boto.sqs.connect_to_region(obj.region,
                              aws_access_key_id = obj.accesskey,
                              aws_secret_access_key = obj.secretkey)

#-----------------------------------------------------------------------
def setS3Conn(obj):
    """connect to S3"""
    obj.s3conn = boto.s3.connect_to_region(obj.region,
                              aws_access_key_id = obj.accesskey,
                              aws_secret_access_key = obj.secretkey)

#-----------------------------------------------------------------------
def setKinesisConn(obj):
    """connect to Kinesis"""
    obj.kinesisconn = boto.kinesis.connect_to_region(obj.region,
                              aws_access_key_id = obj.accesskey,
                              aws_secret_access_key = obj.secretkey)

#-----------------------------------------------------------------------
class AwshCmd(cmd.Cmd):
    """--------------------------------------------------\n"""\
    """| Welcome to awsh, the AWS shell                 |\n"""\
    """| docs: https://github.com/marhar/aws            |\n"""\
    """| type "help" for help                  build<6> |\n"""\
    """--------------------------------------------------\n"""

    #===================================================================
    # Cmd-related things
    #===================================================================

    #-------------------------------------------------------------------
    def __init__(self,profile='default'):
        """AwshCmd init"""
        cmd.Cmd.__init__(self)
        readline.set_completer_delims(' ')

        self.profile = profile
        self.pemfile = '%s.pem'%(self.profile)
        self.iname = {}  # map of names -> instance ids

        p2 = profile
        if profile != 'default':
            p2 = 'profile '+p2

        try:
            config = awshelpers.readconfig('config')
            self.region = config[p2]['region']
            self.output = config[p2]['output']

            credentials = awshelpers.readconfig('credentials')
            self.accesskey = credentials[self.profile]['aws_access_key_id']
            self.secretkey = credentials[self.profile]['aws_secret_access_key']
        except KeyError, e:
            P('    error with profile: '+profile)
            P('    key access error reading configuration')
            P('    fix in ~/.aws/config')
            P('    %s'%(e))
            sys.exit(1)

        self.prompt = '%s@%s> '%(self.profile,self.region)

        # connect via threads for fast startup
        tlist = []
        tlist.append(threading.Thread(target = setEc2Conn,args = [self]))
        tlist.append(threading.Thread(target = setSqsConn,args = [self]))
        tlist.append(threading.Thread(target = setS3Conn,args = [self]))
        tlist.append(threading.Thread(target = setKinesisConn,args = [self]))
        for t in tlist: t.start()
        for t in tlist: t.join()

        ## later see if we can do this:
        ## create connections to several services, named _foo
        #tlist = []
        #pkglist = [boto.ec2,boto.sqs,boto.iam,boto.ec2.elb]
        #for pkg in pkglist:
        #    tlist.append(threading.Thread(target = self._setConn,args = [pkg]))
        #for t in tlist: t.start()
        #for t in tlist: t.join()

    #-----------------------------------------------------------------------
    def _setConn(self,pkg):
        """create a connection to AWS service foo named _foo"""
        name = pkg.__name__.split('.')
        name = '_'+name[len(name)-1]
        setattr(self,name,pkg.connect_to_region(self.region,
                                  aws_access_key_id = self.accesskey,
                                  aws_secret_access_key = self.secretkey))

    #-------------------------------------------------------------------
    def emptyline(self):
        """ignore empty lines"""
        pass

    #-------------------------------------------------------------------
    def do_EOF(self,s):
        """INTERNAL: quit"""
        P('')
        sys.exit(0);

    #-------------------------------------------------------------------
    def do_quit(self,s):
        """awsh: quit the program"""
        # this could be 'do_quit = do_EOF' but it messes up help.
        sys.exit(0);

    #-------------------------------------------------------------------
    def do_help(self,s):
        """awsh: print help information"""
        s = s.strip(';')
        if s != '': # cmd-specific help
            func = 'do_'+s
            if AwshCmd.__dict__.has_key(func):
                hh = AwshCmd.__dict__[func].__doc__.split(':')
                P('    %s'%(':'.join(hh[1:])))
            else:
                P('    no help for %s'%(s))

        else:  # generic parm-less help
            funclist = [x[3:] for x,y in AwshCmd.__dict__.items()
                      if type(y) == types.FunctionType
                       and x.startswith('do_')]
            mxlen = max([len(f) for f in funclist])

            helptext = {}
            categories = collections.defaultdict(list)

            for f in funclist:
                hh = AwshCmd.__dict__['do_'+f].__doc__.split(':')
                categories[hh[0]].append(f)
                helptext[f] = hh[1].strip()

            try:
                del(categories['INTERNAL'])
            except KeyError:
                pass
            try:
                del(categories['undoc'])
            except KeyError:
                pass

            P(__doc__)
            for k in sorted(categories.keys()):
                P('  %s:'%(k))
                for f in sorted(categories[k]):
                    P('    %*s : %s'%(mxlen,f,helptext[f]))

    #-------------------------------------------------------------------
    def do_shell(self,s):
        """awsh: invoke a shell command"""
        os.system(s)

    #===================================================================
    # shell commands
    #===================================================================

    #-----------------------------------------------------------------------
    def do_config(self,s):
        """devops: print information about this profile"""
        P('   region: %s'%(self.region))
        P('   output: %s'%(self.output))
        P('  profile: %s'%(self.profile))
        P('  pemfile: %s'%(self.pemfile))

    #-----------------------------------------------------------------------
    def do_reservations(self,s):
        """ec2: display reservations"""
        # TODO: figure out any more useful info to display?
        # BUG: nuke i0, should be for instance in instances???
        reservations = self.conn.get_all_reservations()
        for r in reservations:
            P('  '+str(r))
            instances = r.instances
            i0 = instances[0]
            P('    '+i0.id)
            P('      '+i0.instance_type)
            P('      '+i0.placement)

    #-----------------------------------------------------------------------
    def do_myip(self,s):
        """devops: what's my ip address according to amazon?"""
        fd = urllib2.urlopen("http://checkip.amazonaws.com")
        ip = fd.read()
        print(ip.strip())

    #-----------------------------------------------------------------------
    def _attrlist(self,obj, attrs):
        """get a list of named attributes from an object"""
        vlist = [obj.__getattribute__(attr) for attr in attrs]
        return vlist
        
    #-----------------------------------------------------------------------
    def do_instances(self,s):
        """ec2: print information about instances"""

        dat = []
        headers = 'id ip_address instance_type placement state'.split()
        #TODO: figure out better way of patching in Name
        for r in self.conn.get_all_reservations():
            for inst in r.instances:
                if inst.state != 'terminated':
                    dat.append(self._attrlist(inst,headers))
                    dat[len(dat)-1].insert(1,inst.tags.get('Name','notSet'))
        headers.insert(1,'Name')
        awshelpers.tprintx(headers,dat)
        i0 = self.conn.get_all_reservations()[0].instances[0]

    #-----------------------------------------------------------------------
    def do_volumes(self,s):
        """ec2: print information about volumes"""
        # TODO: what else is useful? tags? snapshots? dir(v)

        dat = []
        headers = 'id type zone iops size status'.split()
        for v in self.conn.get_all_volumes():
            row = [v.id,v.type,v.zone,v.iops, v.size, v.status]
            dat.append(row)
        awshelpers.tprintx(headers,dat)

    #-----------------------------------------------------------------------
    def _muststat(self,path):
        """stat, returns None if file not found"""
        try:
            sb = os.stat(path)
        except OSError,e:
            if e.args[0] != 2:  # "No such file or directory"
                raise e
            sb = None
        return sb

    #-----------------------------------------------------------------------
    def do_ssh0(self,s):
        """devops: show ssh commands for running nodes"""
        for r in self.conn.get_all_reservations():
            for i0 in r.instances:
                if i0.state in ['running','pending']:
                    addr = str(i0.ip_address)
                    pemfile = '%s/.aws/%s'%(os.environ['HOME'],self.pemfile)
                    sb = self._muststat(pemfile)
                    if sb is None:
                        P('no pemfile: '+pemfile)
                    elif (sb.st_mode & 0777) != 0400:
                        P('pemfile perms must be 0400, not %o: %s'%\
                                                    (sb.st_mode,pemfile))
                    P('ssh -i %s ec2-user@%s'% \
                      (pemfile,addr))

    #-----------------------------------------------------------------------
    def do_ssh(self,s):
        """devops: open ssh sessions in tabs"""

        tpl0 = 'tell application "iterm"\n'+\
               '   set myterm to (make new terminal)\n'
        tpl1 = '  tell myterm\n'+\
               '          launch session "Default session"\n'+\
               '          tell the last session\n'+\
               '                  set name to "%s"\n'+\
               '                  write text "%s"\n'+\
               '          end tell\n'+\
               '  end tell\n'
        tpl2 = 'end tell\n'

        cmd = tpl0

        for r in self.conn.get_all_reservations():
            for i0 in r.instances:
                if i0.state in ['running','pending']:
                    addr = str(i0.ip_address)
                    name = i0.tags.get('Name','notSet')
                    pemfile = '%s/.aws/%s'%(os.environ['HOME'],self.pemfile)
                    sb = self._muststat(pemfile)
                    if sb is None:
                        P('no pemfile: '+pemfile)
                    elif (sb.st_mode & 0777) != 0400:
                        P('pemfile perms must be 0400, not %o: %s'%\
                                                    (sb.st_mode,pemfile))
                    P('echo %s;ssh -i %s ec2-user@%s'% \
                      (name,pemfile,addr))
                    cmd += tpl1%(name,'clear;exec ssh -i %s ec2-user@%s'%(pemfile,addr))
        cmd+=tpl2
        osa = os.popen('osascript','w')
        osa.write(cmd)
        osa.flush()
        osa.close()

    #-----------------------------------------------------------------------
    def do_curl(self,s):
        """devops: curl commands for testing running nodes"""
        for r in self.conn.get_all_reservations():
            for inst in r.instances:
                if inst.state in ['running']:
                    P('curl http://%s'%(inst.ip_address))
                    P("curl 'http://%s/cgi-bin/mathserver?op=add&x=4&y=5'"%\
                                       (inst.ip_address))

    #-----------------------------------------------------------------------
    def do_div0(self,s):
        """devel: divide by zero, test case for runtime error reporting"""
        x = 1/0
        #TODO: for error reporting, add build number, auto report bug

    #-----------------------------------------------------------------------
    def _instancelist(self):
        """return a list of instances and statuses"""

        rv = []
        self.iname = {}
        for resv in self.conn.get_all_reservations():
            for inst in resv.instances:
                if inst.state != 'terminated':
                    name = inst.tags.get('Name',None)
                    rv.append([inst.id,inst.state])
                    if name is not None:
                        rv.append([name,inst.state])
                    else:
                        rv.append([inst.id+'-needsName',inst.state])
                    self.iname[name] = inst.id
                    self.iname[inst.id] = inst.id
        return rv

    #-----------------------------------------------------------------------
    def _instance_complete(self, text, line, begidx, endidx, notstates):
        """instance-specific completer, state must be as specified"""
        choices = []
        for x in self._instancelist():
            if x[1] not in notstates:
                choices.append(x[0])

        matches = []
        for x in choices:
            if x.startswith(text):
                matches.append(x)
        return matches

    #-----------------------------------------------------------------------
    def complete_start(self, text, line, begidx, endidx):
        """start completions: instances which are not running"""
        notstates = ['running','pending']
        return self._instance_complete(text,line,begidx,endidx,notstates)

    #-----------------------------------------------------------------------
    def complete_stop(self, text, line, begidx, endidx):
        """start completions: instances which are not running"""
        notstates = ['stopped','stopping']
        return self._instance_complete(text,line,begidx,endidx,notstates)

    #-----------------------------------------------------------------------
    def do_start(self,s):
        """ec2: start one or more instances"""

        a = s.split()
        if len(a) == 0:
            P('    usage: start instancelist...')
            return

        self._instancelist()  # refresh self.inames
        started_states = ['pending','running','terminated']
        # b is list of instances match that match wc
        b = []
        for wc in a:
            if wc.find('*') == -1 and wc.find('?') == -1:
                b.append(self.iname[wc])
            else:
                for c in [i[0] for i in self._instancelist() \
                                 if i[1] not in started_states]:
                    if fnmatch.fnmatch(c,wc):
                        b.append(self.iname[c])

        if len(b) == 0:
            P('    error: no unstarted instance matches: %s'%s)
            return

        try:
            rv = self.conn.start_instances(instance_ids = b)
            for i in rv:
                P('    starting: %s'%(i))
        except boto.exception.EC2ResponseError,e:
            P('    error: %s'%(e.message))


    #-----------------------------------------------------------------------
    def do_stop(self,s):
        """ec2: stop one or more instances"""

        a = s.split()
        if len(a) == 0:
            P('    usage: stop instancelist...')
            return

        self._instancelist()  # refresh self.inames
        stopped_states = ['stopping','stopped','terminated']
        # b is list of instances match that match wc
        b = []
        for wc in a:
            if wc.find('*') == -1 and wc.find('?') == -1:
                b.append(self.iname[wc])
            else:
                for c in [i[0] for i in self._instancelist() \
                                 if i[1] not in stopped_states]:
                    if fnmatch.fnmatch(c,wc):
                        b.append(self.iname[c])

        if len(b) == 0:
            P('    error: no unstopped instance matches: %s'%s)
            return

        try:
            rv = self.conn.stop_instances(instance_ids = b)
            for i in rv:
                P('    stopping: %s'%(i))
        except boto.exception.EC2ResponseError,e:
            P('    error: %s'%(e.message))

    #-----------------------------------------------------------------------
    def do_console(self,s):
        """devops: open an AWS web console"""
        #TODO: make work on non-OSX
        P("make sure you're logged in to "+self.profile)
        os.system('open https://aws.amazon.com/console')

    #-----------------------------------------------------------------------
    def do_queues(self,s):
        """sqs: list queues"""

        dat = []
        headers = 'name url'.split()
        for q in self.sqsconn.get_all_queues():
            dat.append(self._attrlist(q,headers))
            dat[len(dat)-1].append(str(q.count()))
            dat[len(dat)-1].append(str(q.count_slow()))
        headers.append('count')
        headers.append('count_slow')
        awshelpers.tprintx(headers,dat)

    #-----------------------------------------------------------------------
    def do_s3(self,s):
        """s3: list s3 buckets"""
        print self.s3conn


    # IP >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    # rough edits below >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    #-----------------------------------------------------------------------
    def do_launch(self,s):
        """ec2: launch an instance"""
        x = self.conn.run_instances('ami-d7450be7',
                                key_name = 'mhtest',
                                instance_type = 't2.micro',
                                security_groups = ['mhsecurity'])
        print x

        # make sure we can ssh into it.  this probably can be
        # wrapped up into its own function and called once per
        # session.  perhaps make a command so that if we move
        # laptop between networks we can rejigger

        G = 'singlessh'

        #------------------------------------------------
        # create security group G if it does not exist
        exists = False
        for g in self.conn.get_all_security_groups():
            if g.name == G:
                exists = True
                break

        if exists == False:
            P('creating security group: %s'%(G))
            groups[G] = self.conn.create_security_group(G,'single location ssh')
        else:
            P('modifying security group: %s'%(G))

        #------------------------------------------------
        # delete any ingress rules from G.
        for r in g.rules:
            for cidr in r.grants:
                P('revoking grant: %s'%(cidr))
                g.revoke(r.ip_protocol,r.from_port,r.to_port,cidr_ip = cidr)

        #------------------------------------------------
        # and add our IP address as the sole ingress host
        mycidr = self.myip()+'/32'
        P('mycidr:%s:'%mycidr)
        P('authorizing: %s'%(mycidr))
        g.authorize(ip_protocol = 'tcp', from_port = 22, to_port = 22, cidr_ip = mycidr)

    # brignt ideas >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    #-----------------------------------------------------------------------
    def complete_queue(self, text, line, begidx, endidx):
        """queue completions"""
        pline = line[begidx:endidx]
        a = line.split()

        subcmds = [
            'add-permission', 'change-message-visibility',
            'create',
            'delete-message',
            'delete', 'attributes',
            'url', 'help',
            'dead-letter-source', 'list',
            'purge', 'receive-message',
            'remove-permission', 'send-message',
            'send-message', 'set-attributes',]

        #TODO: can we combine cases 1,2 and 3,4?
        if len(a) == 1:
            #complete all subcmds
            return subcmds
        elif len(a) == 2 and a[1]==pline:
            #complete matching subcmds
            matches = [x for x in subcmds if x.startswith(a[1])]
            return matches
        elif len(a) == 2 and pline=='':
            # complete all queue names
            matches = []
            self.q_name_to_url = {}
            self.q_url_to_name = {}
            for q in self.sqsconn.get_all_queues():
                matches.append(q.name)
                matches.append(q.url)
                self.q_name_to_url[q.name] = q.url
                self.q_url_to_name[q.url] = q.name
                return matches
        else:
            # complete matching queue names
            matches = []
            self.q_name_to_url = {}
            self.q_url_to_name = {}
            for q in self.sqsconn.get_all_queues():
                self.q_name_to_url[q.name] = q.url
                self.q_url_to_name[q.url] = q.name
                if q.name.startswith(pline):
                    matches.append(q.name)
                if q.url.startswith(pline):
                    matches.append(q.url)
            return matches

    #-----------------------------------------------------------------------
    def do_queue(self,s):
        """sqs: queue commands"""
        P('note: command does nothing at this time')
        P('queue<%s>'%s)

    #-----------------------------------------------------------------------
    def do_loadbalancers(self,s):
        """elb: list load balancers"""
        for lb in self._elb.get_all_load_balancers():
            P('%s'%lb.name)
            P('    %s'%lb.dns_name)
            for i in self._elb.describe_instance_health(lb.name):
                P('        %s : %s (%s)'%(i.instance_id,i.state,i.reason_code))

    #-----------------------------------------------------------------------
    def _kinesis_describe(self,n):
        """describe a kinesis stream"""
        P(n)
        desc=self.kinesisconn.describe_stream(n)
        P('       status : %s'%desc['StreamDescription']['StreamStatus'])
        P('          arn : %s'%desc['StreamDescription']['StreamARN'])
        P('    retention : %s'%desc['StreamDescription']['RetentionPeriodHours'])
        P('       shards : %s'%len(desc['StreamDescription']['Shards']))
        for ss in desc['StreamDescription']['Shards']:
             P('        %s'%(ss['ShardId']))

    #-----------------------------------------------------------------------
    def do_kinesis(self,s):
        """kinesis: print kinesis configuration"""
        # going to use this as a testbed for subcommands
        flag=True
        while flag:
            chunk=self.kinesisconn.list_streams()
            flag=chunk['HasMoreStreams']
            for n in chunk['StreamNames']:
                self._kinesis_describe(n)

    #-----------------------------------------------------------------------
    def do_kinesisadd(self,s):
        """kinesisadd: create kinesis stream"""
        a=s.split()
        if len(a) != 2:
            P('    usage: kinesisadd channel-name nshards')
        else:
            try:
                self.kinesisconn.create_stream(a[0], int(a[1]))
            except boto.kinesis.exceptions.ResourceInUseException,e:
                print e.message

    #-----------------------------------------------------------------------
    def do_kinesisdel(self,s):
        """kinesisdel: delete kinesis stream"""
        a=s.split()
        if len(a) != 1:
            P('    usage: kinesisdel channel-name')
        else:
            try:
                self.kinesisconn.delete_stream(a[0])
            except boto.kinesis.exceptions.ResourceInUseException,e:
                print e.message

    #-----------------------------------------------------------------------
    def FUTURE_do_wait(self,s):
        """devops: wait for instance(s) to be in running/stopped states"""
        P('COMING')

    #-----------------------------------------------------------------------
    def FUTURE_do_iam(self,s):
        """iam: print iam configuration"""
        P('COMING')

    #-----------------------------------------------------------------------
    def FUTURE_do_hints(self,s):
        """undoc: print some useful hints"""
        P('COMING')

    #-----------------------------------------------------------------------
    def FUTURE_do_web(self,s):
        """undoc: open a web page with docs? status?"""
        P('COMING')

    #-----------------------------------------------------------------------
    def FUTURE_do_watcher(self,s):
        """undoc: run the watcher in another window"""
        P('COMING')

    #-----------------------------------------------------------------------
    def FUTURE_do_login(self,s):
        """undoc: modify the box to allow single ip login from this box"""
        P('COMING')

    #-----------------------------------------------------------------------
    def FUTURE_do_nologin(self,s):
        """undoc: modify the box to disallow single login"""
        P('COMING')

    #-----------------------------------------------------------------------
    def FUTURE_do_region(self,s):
        """undoc: set the region"""
        P('COMING')

    #-----------------------------------------------------------------------
    def FUTURE_do_profile(self,s):
        """undoc: change the profile"""
        P('COMING')

    #-----------------------------------------------------------------------
    def FUTURE_do_profiles(self,s):
        """undoc: list profiles"""
        P('COMING')

    #-----------------------------------------------------------------------
    def FUTURE_do_reboot(self,s):
        """undoc: reboot an instance"""
        P('COMING')

    # revisit these >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

    #-----------------------------------------------------------------------
    def THINK_ABOUT_THIS_do_terminate(self,s):
        """ec2: terminate an instance"""

        P("    use stop to stop an instance. don't terminate here for now...")
        return

        # BUG: nuke i0, should be for instance in instances???
        a = s.split()
        if len(a) == 0:
            P('  usage: terminate --all | id-list')
        elif len(a) == 1 and a[0] == '--all':
            reservations = self.conn.get_all_reservations()
            idlist = []
            for r in reservations:
                instances = r.instances
                i0 = instances[0]

                FORCE_TERMINATE = False
                if FORCE_TERMINATE:
                    # even if it's already termed, term it again!
                    idlist.append(i0.id)
                else:
                    if i0.state != 'terminated':
                        idlist.append(i0.id)
            if len(idlist) == 0:
                P('  no reservations to terminate')
            else:
                rr = self.conn.terminate_instances(instance_ids = idlist)
                P('  '+str(rr))
        else:
            try:
                rr = self.conn.terminate_instances(instance_ids = a)
                P('  '+str(rr))
            except boto.exception.EC2ResponseError,e:
                P('  '+e.message)

#-----------------------------------------------------------------------
def main():
    """The MAIN thing that you have to remember on this journey is,
       just be nice to everyone and always smile.
         -- Ed Sheeran
    """
    P0(AwshCmd.__doc__)

    if len(sys.argv) >= 2:
        profile = sys.argv[1]
    else:
        profile = os.environ.get('AWS_DEFAULT_PROFILE','default')
    AWSDIR = os.environ['HOME']+'/.aws'

    if profile == '-':
        config = awshelpers.readconfig('config')
        credentials = awshelpers.readconfig('credentials')
        P('profiles:')
        for p in sorted(credentials.keys()):
            P('    %s'%p)
        sys.exit(0)

    historyFile = AWSDIR+'/%s.history'%profile
    open(historyFile,'a').close()

    if os.path.exists(historyFile):
        # gnu/libedit readline weirdness on macos. see
        # https://docs.python.org/2/library/readline.html
        if readline.__doc__.rfind('libedit') == -1:
            readline.read_history_file(historyFile)

    def writeHistory(historyFile = historyFile):
        readline.write_history_file(historyFile)
    atexit.register(writeHistory)

    cc = AwshCmd(profile)
    while True:
        try:
            cc.cmdloop()
            break
        except KeyboardInterrupt:
            P('^C')
        except Exception,e:
            P('')
            P('*'*72)
            P('Unexpected Error:')
            traceback.print_exc()
            P('')
            P('please file a bug report')
            P('and include the above error details:')
            P('    https://github.com/marhar/aws/issues/new')
            P('*'*72)

if __name__=='__main__':
    main()
