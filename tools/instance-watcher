#!/usr/local/sqlminus/bin/python
"""
instance-watcher -- watch aws instances

    https://github.com/marhar/aws       :  share and enjoy!
    Mark Harrison, marhar@gmail.com     :
"""

#TODO: shows stats for other things besides ec2
#TODO: clean up code structure since now it's a pure ansi terminal thing

import os,sys,time
import boto.ec2
import awshelpers
from pprint import pprint
from awshelpers import P,P0,tprint,tprintx

#-----------------------------------------------------------------------
# ansi esc sequences
#-----------------------------------------------------------------------
_ho='\033[H'     # cursor home
_ed='\033[J'     # erase to end of display
_el='\033[K'     # erase to end of line

#-----------------------------------------------------------------------
def doit(conn,profile):
    """show status with nice looking update"""

    P0('ec2 (%s) %s %s                           build<6>\n'%\
                                           (profile,time.ctime(),_el))
    reservations=conn.get_all_reservations()
    # name | id | type | zone | state | status-checks | alarm-status

    dat=[]
    #TODO: figure out better way of patching in Name
    headers='id addr type zone state'.split()
    for r in reservations:
        instances=r.instances
        i0=instances[0]
        if i0.state != 'terminated':
            x=[i0.id,i0.ip_address,i0.instance_type,i0.placement,i0.state]
            x.insert(1,i0.tags.get('Name','notSet'))
            dat.append(x)
    headers.insert(1,'Name')
    tprintx(headers,dat)
    P0(_ed)

#-----------------------------------------------------------------------
def doodle(period):
    """sleep while drawing the canonical timing doodle"""
    targ=time.time()+period
    period=4.0
    n=period/8.0*2
    while time.time() < targ:
        P0('\r|  '+_ed); time.sleep(n)
        P0('\r/  '+_ed); time.sleep(n)
        P0('\r-  '+_ed); time.sleep(n)
        P0('\r\\  '+_ed); time.sleep(n)
        P0('\r|  '+_ed); time.sleep(n)
        P0('\r/  '+_ed); time.sleep(n)
        P0('\r-  '+_ed); time.sleep(n)
        P0('\r\\  '+_ed); time.sleep(n)

#-----------------------------------------------------------------------
def main():
    """the main thing"""

    if len(sys.argv) >= 2:
        profile=sys.argv[1]
    else:
        profile='default'

    cfg = awshelpers.readconfig('config')
    credentials=awshelpers.readconfig('credentials')

    #---------------------------------------------------------
    # for --all, loop through all profiles in credentials file
    #---------------------------------------------------------
    if profile == '--all':
        allprofiles=[]
        for pp in credentials.keys():
            #TODO: maybe shouldn't strip out default in --all?
            if pp != 'default':
                allprofiles.append(pp)

        while True:
            P0(_ho)
            for pp in allprofiles:
                pp2='profile '+pp
                conn = boto.ec2.connect_to_region(cfg[pp2]['region'],
                                aws_access_key_id=
                                credentials[pp]['aws_access_key_id'],
                                aws_secret_access_key=
                                credentials[pp]['aws_secret_access_key'])
                doit(conn,pp)
                P(_el)
            doodle(len(allprofiles)*5)

    #-----------------------------
    # just watch one profile
    #-----------------------------
    else:
        p2=profile
        if profile != 'default':
            p2 = 'profile '+p2

        region = cfg[p2]['region']
        output = cfg[p2]['output']
        accesskey = credentials[profile]['aws_access_key_id']
        secretkey = credentials[profile]['aws_secret_access_key']

        conn = boto.ec2.connect_to_region(region,
                  aws_access_key_id=accesskey,
                  aws_secret_access_key=secretkey)

        while True:
            P0(_ho)
            doit(conn,profile)
            doodle(2)

#-----------------------------------------------------------------------
if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        P('^C')
        P(_ed)
        sys.exit(0)
