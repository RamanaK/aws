#!/usr/local/sqlminus/bin/python
"""
instance-watcher -- watch aws instances

    https://github.com/marhar/aws       :  share and enjoy!
    Mark Harrison, marhar@gmail.com     :
"""

#TODO: look at stuff for all ebaws accounts
#TODO: shows stats for other things besides ec2

import os,sys,time
import boto.ec2
import awshelpers
from pprint import pprint
from awshelpers import P,P0,tprint,tprintx

#-----------------------------------------------------------------------
def doit_scroll():
    global conn
    P('------')
    P('AWS Instances '+time.ctime())

    reservations=conn.get_all_reservations()
    for r in reservations:
        instances=r.instances
        i0=instances[0]
        P('            instance-id: '+i0.id)
        P('          instance-type: '+i0.instance_type)
        P('      availability-zone: '+i0.placement)
        P('         instance-state: '+i0.state)
        ###P('         instance-state: '+i0.monitoring_state)
        P('          status-checks: '+'___')
        P('           alarm-status: '+'___')
        P('                      ?: '+i0.image_id)
        P('')

#-----------------------------------------------------------------------
_ho='\033[H'; _ed='\033[J'; _el='\033[K'  # ansi esc sequences
def doit_ansi():
    """show status with nice looking update"""

    global conn
    P0(_ho)
    P0('AWS (%s) %s %s                                  build<3>\n'%\
                                           ('asfd',time.ctime(),_el))
    reservations=conn.get_all_reservations()
    # name | id | type | zone | state | status-checks | alarm-status

    dat=[]
    headers='id addr type zone state status alarm'.split()
    for r in reservations:
        instances=r.instances
        i0=instances[0]
        if i0.state != 'terminated':
            x=[i0.id,i0.ip_address,i0.instance_type,i0.placement,i0.state,'___','___']
            dat.append(x)
    tprintx(headers,dat)
    P0(_ed)

def doodle(period):
    """sleep while drawing the canonical timing doodle"""
    targ=time.time()+period
    n=2.0/8.0*2
    while time.time() < targ:
        P0('\r|  '+_ed); time.sleep(n)
        P0('\r/  '+_ed); time.sleep(n)
        P0('\r-  '+_ed); time.sleep(n)
        P0('\r\\  '+_ed); time.sleep(n)
        P0('\r|  '+_ed); time.sleep(n)
        P0('\r/  '+_ed); time.sleep(n)
        P0('\r-  '+_ed); time.sleep(n)
        P0('\r\\  '+_ed); time.sleep(n)

def doit(style='full'):
    """vector doit call to appropriate display routine"""
    if style == 'full':
        doit_ansi()

def main():
    global conn
    cfg = awshelpers.readconfig('config')
    ebcfg = awshelpers.readconfig('ebconfig')
    region = cfg['default']['region']
    output = cfg['default']['output']
    name = ebcfg['default']['name']
    try:
        account = cfg['x-account']['name']
    except KeyError:
        account='(config: set .aws.config.x-account.name)'
    conn = boto.ec2.connect_to_region(region)

    while True:
        doit()
        doodle(2)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        P('^C')
        P('')
        sys.exit(0)
